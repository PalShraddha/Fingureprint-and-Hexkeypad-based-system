#include <Adafruit_Fingerprint.h>
#include<SoftwareSerial.h>
#include <WiFi.h>
#include <Adafruit_GFX.h>
#include <Adafruit_SSD1306.h>
#include "Adafruit_Keypad.h"

#if (defined(_AVR) || defined(ESP8266)) && !defined(__AVR_ATmega2560_)

SoftwareSerial mySerial(D6, D7);

#else

#define mySerial Serial1

#endif

const char* NAME;
const char* ID;

String Event_Name = "fingerprint attendance";

String Key = "fCVDvONMDQ5VZH4PYexLbtYImP5pCp8jIH0Ttg4EOxN";

String resource = "/trigger/" + Event_Name + "/with/key/" + Key;

const char* server = "maker.ifttt.com";

const char* ssid = "POCO M2";
const char* password = "18021994";
const byte ROWS = 4; // rows
const byte COLS = 4; // columns

char keys[ROWS][COLS] = {
  {'1','2','3','A'},
  {'4','5','6','B'},
  {'7','8','9','C'},
  {'*','0','#','D'}
};
byte rowPins[ROWS] = {D0, D1, D2, D3}; //connect to the row pinouts of the keypad
byte colPins[COLS] = {D4, D5, D6, D7}; //connect to the column pinouts of the keypad
//initialize an instance of class NewKeypad
Adafruit_Keypad customKeypad = Adafruit_Keypad( makeKeymap(keys), rowPins, colPins, ROWS, COLS);

Adafruit_SSD1306 display = Adafruit_SSD1306(128, 64, &Wire, -1);
unsigned long delayTime;

Adafruit_Fingerprint finger = Adafruit_Fingerprint(&mySerial);

void setup()
{
  Serial.begin(9600);
  customKeypad.begin();
  while (!Serial);  // For Yun/Leo/Micro/Zero/...
  delay(100);
  Serial.println("\n\nAdafruit finger detect test");

  // set the data rate for the sensor serial port
  finger.begin(57600);
  delay(5);
  if (finger.verifyPassword()) {
    Serial.println("Found fingerprint sensor!");
  } else {
    Serial.println("Did not find fingerprint sensor :(");
    while (1) { delay(1); }
  }
  display.begin(SSD1306_SWITCHCAPVCC, 0x3C); 
  display.display();
  delay(100);
  display.clearDisplay();
  display.display();
  display.setTextSize(1.75);
  display.setTextColor(WHITE);
}

void loop()                     // run over and over again
{
  getFingerprintIDez();
  //delay(50);     //don't ned to run this at full speed.
  
  if(finger.fingerID == 41)
  {
    Serial.print("!!--");
    Serial.println(finger.fingerID);
    NAME = "Shraddha";
    ID = "41";
    if(finger.confidence >= 60)
    {
      Serial.print(" ACCESS GRANTED TO "); Serial.println(NAME);
      display.setCursor(0,0);
  display.clearDisplay();
display.setTextSize(1);
  display.setCursor(0,0);
  display.print(" ACCESS GRANTED TO ");
  display.setTextSize(1);
  //display.setCursor(0,10);
  display.print(NAME);
  display.print(" ");
  display.setTextSize(1);
  //display.cp437(true);
  display.write(167);
  display.setTextSize(1);
  //display.print("C");  


      makeIFTTTRequest();
    }
  }

    if(finger.fingerID == 42)
  {
    Serial.print("!!--");
    Serial.println(finger.fingerID);
    NAME = "Hrishita";
    ID = "42";
    if(finger.confidence >= 60)
    {
      Serial.print(" ACCESS GRANTED TO "); Serial.println(NAME);
      display.setCursor(0,0);
  display.clearDisplay();
      makeIFTTTRequest();
    }
  }
  if(finger.fingerID == 43)
  {
    Serial.print("!!--");
    Serial.println(finger.fingerID);
    NAME = "Ishita";
    ID = "43";
    if(finger.confidence >= 60)
    {
      Serial.print(" ACCESS GRANTED TO "); Serial.println(NAME);
      display.setCursor(0,0);
  display.clearDisplay();
      makeIFTTTRequest();
    }
  }

  if(finger.fingerID == 44)
  {
    Serial.print("!!--");
    Serial.println(finger.fingerID);
    NAME = "Kashish";
    ID = "44";
    if(finger.confidence >= 60)
    {
      Serial.print(" ACCESS GRANTED TO "); Serial.println(NAME);
      display.setCursor(0,0);
  display.clearDisplay();
      makeIFTTTRequest();
    }
  }
finger.fingerID = 0;

customKeypad.tick();

  while(customKeypad.available()){
    keypadEvent e = customKeypad.read();
    Serial.print((char)e.bit.KEY);
    if(e.bit.EVENT == KEY_JUST_PRESSED) Serial.println(" pressed");
    else if(e.bit.EVENT == KEY_JUST_RELEASED) Serial.println(" released");
  }

  delay(10);
}




uint8_t getFingerprintID() {
  uint8_t p = finger.getImage();
  switch (p) {
    case FINGERPRINT_OK:
      Serial.println("Image taken");
      break;
    case FINGERPRINT_NOFINGER:
      Serial.println("No finger detected");
      return p;
    case FINGERPRINT_PACKETRECIEVEERR:
      Serial.println("Communication error");
      return p;
    case FINGERPRINT_IMAGEFAIL:
      Serial.println("Imaging error");
      return p;
    default:
      Serial.println("Unknown error");
      return p;
  }

  p = finger.image2Tz();
  switch (p) {
    case FINGERPRINT_OK:
      Serial.println("Image converted");
      break;
    case FINGERPRINT_IMAGEMESS:
      Serial.println("Image too messy");
      return p;
    case FINGERPRINT_PACKETRECIEVEERR:
      Serial.println("Communication error");
      return p;
    case FINGERPRINT_FEATUREFAIL:
      Serial.println("Could not find fingerprint features");
      return p;
    case FINGERPRINT_INVALIDIMAGE:
      Serial.println("Could not find fingerprint features");
      return p;
    default:
      Serial.println("Unknown error");
      return p;
  }

  // OK converted!
  p = finger.fingerSearch();
  if (p == FINGERPRINT_OK) {
    Serial.println("Found a print match!");
  } else if (p == FINGERPRINT_PACKETRECIEVEERR) {
    Serial.println("Communication error");
    return p;
  } else if (p == FINGERPRINT_NOTFOUND) {
    Serial.println("ACCESS DENIED");
    return p;
  } else {
    Serial.println("Unknown error");
    return p;
  }

  // found a match!
  Serial.print("Found ID #"); Serial.print(finger.fingerID);
  //Serial.print(" with confidence of "); Serial.println(finger.confidence);
  Serial.print("ACCESS GRANTED");

  return finger.fingerID;
}

// returns -1 if failed, otherwise returns ID #
int getFingerprintIDez() {
  uint8_t p = finger.getImage();
  if (p != FINGERPRINT_OK)  return -1;

  p = finger.image2Tz();
  if (p != FINGERPRINT_OK)  return -1;

  p = finger.fingerFastSearch();
  if (p != FINGERPRINT_OK)  return -1;

  // found a match!
  Serial.print("Found ID #"); Serial.print(finger.fingerID);
  //Serial.print(" with confidence of "); Serial.println(finger.confidence);
  Serial.print("ACCESS GRANTED");
  delay(100);
  return finger.fingerID;
}


void makeIFTTTRequest()
{
  Serial.print("Connecting to ");
  Serial.print(server);

  WiFiClient client;  

  int retries = 5;
  while(!!!client.connect(server, 80) && (retries-- > 0))
  {
    Serial.print(".");
  }
  Serial.println();
  if(!!!client.connected()){
    Serial.println("Falied to connect...");
  }
  Serial.print("Request resource: ");
  Serial.println(resource);

  String json = String("{\"value1\":\"") + NAME + "\",\"value2\":\"" + ID + "\}";

  client.println(String("POST )" + resource + " HTTP/1.1"));
  client.println(String("Host: ") + server);
  client.println("Connnection: close\r\nContent-Type: application/json");
  client.print("Connect_Length");
  client.println(json.length());
  client.println();
  client.println(json);

  int timeout = 5 * 10;
  while(!!!client.available() && (timeout-- > 0))
  {
    delay(100);
  }
  
}
